package com.msu.thief;

import java.io.IOException;

import org.apache.log4j.BasicConfigurator;

import com.msu.thief.io.thief.reader.JsonThiefProblemReader;
import com.msu.thief.io.thief.reader.ThiefSingleTSPLIBProblemReader;
import com.msu.thief.problems.SingleObjectiveThiefProblem;
import com.msu.thief.problems.variable.Pack;
import com.msu.thief.problems.variable.TTPVariable;
import com.msu.thief.problems.variable.Tour;

public class ExperimentResultCheck {

	final public static String NAME = "best";

	public static void main(String[] args) throws IOException {

		BasicConfigurator.configure();

		/*
		 * SingleObjectiveThiefProblem thief = (SingleObjectiveThiefProblem) new
		 * ThiefSingleTSPLIBProblemReader() .read(
		 * "../ttp-benchmark/TSPLIB/berlin52-ttp/berlin52_n51_bounded-strongly-corr_01.ttp"
		 * );
		 * 
		 * 
		 * Map<String, TTPVariable> m = new HashMap<>(); m.put("bilevel",
		 * TTPVariable.createFromString(
		 * "[0, 48, 31, 44, 18, 40, 7, 8, 9, 42, 32, 50, 10, 51, 13, 12, 46, 25, 26, 27, 11, 24, 3, 5, 14, 4, 23, 47, 37, 36, 39, 38, 35, 34, 33, 43, 45, 15, 28, 49, 19, 22, 29, 1, 6, 41, 20, 16, 2, 17, 30, 21];[0, 1, 2, 3, 42, 15, 16, 48, 17, 49, 18, 50, 19, 20, 29]"
		 * )); m.put("best", TTPVariable.createFromString(
		 * "[0, 48, 31, 2, 16, 41, 6, 1, 29, 28, 15, 45, 36, 39, 37, 47, 23, 4, 14, 5, 3, 24, 11, 27, 26, 25, 46, 12, 13, 51, 10, 50, 32, 42, 9, 8, 7, 40, 18, 44, 17, 30, 20, 22, 19, 49, 43, 33, 38, 35, 34, 21];[0, 32, 1, 33, 2, 34, 3, 42, 48, 17, 49, 18, 50, 19, 20]"
		 * )); m.put("tsma", TTPVariable.createFromString(
		 * "[0,48,31,44,18,40,7,8,9,42,32,50,10,51,13,12,46,25,26,27,11,24,3,5,14,4,23,37,39,38,36,47,45,15,28,29,1,6,41,20,16,2,17,30,22,19,49,43,33,34,35,21];[1,2,3,17,18,19,20,32,33,34,42,48,49,50]"
		 * ));
		 * 
		 * 
		 * Solution<TTPVariable> s = thief.evaluate(m.get(NAME));
		 * System.out.println(s);
		 * 
		 * VariableAsHtml.write(thief, s, String.format("../%s.html", NAME));
		 */
		SingleObjectiveThiefProblem thief = (SingleObjectiveThiefProblem) new ThiefSingleTSPLIBProblemReader()
				.read("../ttp-benchmark-other/TSPLIB/berlin52-ttp/berlin52_n51_bounded-strongly-corr_01.ttp");

		
		
		TTPVariable pistar = TTPVariable.createFromString(
				"[0, 48, 31, 44, 18, 40, 7, 8, 9, 42, 32, 50, 10, 51, 13, 12, 46, 25, 26, 27, 11, 24, 3, 5, 14, 4, 23, 47, 37, 36, 39, 38, 35, 34, 33, 43, 45, 15, 28, 49, 19, 22, 29, 1, 6, 41, 20, 16, 2, 17, 30, 21];[0, 1, 2, 3, 42, 15, 16, 48, 17, 49, 18, 50, 19, 20, 29]");
		TTPVariable tsma = TTPVariable.createFromString(
				"[0,48,31,44,18,40,7,8,9,42,32,50,10,51,13,12,46,25,26,27,11,24,3,5,14,4,23,47,37,39,38,36,45,15,28,29,1,6,41,20,16,2,17,30,22,19,49,43,33,34,35,21];[1,2,3,17,18,19,20,32,33,34,42,48,49,50]");
		TTPVariable best = TTPVariable.createFromString(
				"[0, 17, 2, 16, 6, 1, 41, 29, 28, 15, 45, 36, 37, 47, 23, 4, 14, 5, 3, 24, 11, 27, 26, 25, 46, 12, 13, 51, 10, 50, 32, 42, 9, 8, 7, 40, 18, 44, 31, 21, 30, 20, 22, 19, 49, 43, 33, 39, 38, 34, 35, 48];[0, 1, 33, 2, 34, 3, 42, 47, 48, 17, 49, 18, 50, 19, 20]");

		
				
		String s = "[0,48,38,39,36,37,47,23,4,14,5,3,24,11,27,26,25,46,13,12,51,10,50,32,42,9,8,7,40,18,44,31,30,17,2,16,20,41,6,1,29,22,19,49,28,15,45,43,33,34,35,21];[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1]";
		String[] values = s.split(";");
		TTPVariable bestNew = new TTPVariable(Tour.createFromString(values[0]), Pack.createFromBooleanString(values[1]));
		
		String s1 = "[[0,48,31,44,18,40,7,8,9,42,32,50,10,51,13,12,46,25,26,27,11,24,3,5,14,4,23,47,37,36,39,38,35,34,33,43,45,15,28,49,19,22,29,1,6,41,20,16,2,17,30,21];[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1]";
		String[] values1 = s1.split(";");
		TTPVariable bestNew1 = new TTPVariable(Tour.createFromString(values1[0]), Pack.createFromBooleanString(values1[1]));
		
		
		String s2 = "[0,48,31,44,18,40,7,8,9,42,32,50,10,51,13,12,46,25,26,27,11,24,3,5,14,4,23,47,37,36,39,38,30,17,2,16,20,41,6,1,29,22,19,49,28,15,45,43,33,34,35,21];[1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1]";
		String[] values2 = s2.split(";");
		TTPVariable bestNew2 = new TTPVariable(Tour.createFromString(values2[0]), Pack.createFromBooleanString(values2[1]));
		
		
		String s3 = "[0,38,39,36,37,47,23,4,14,5,3,24,11,27,26,25,46,12,13,51,10,50,32,42,9,8,7,40,18,44,31,48,0,30,17,2,16,20,41,6,1,29,22,19,49,28,15,45,43,21,33,34,35];[0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1]";
		String[] values3 = s3.split(";");
		TTPVariable bestNew3 = new TTPVariable(Tour.createFromString(values3[0]), Pack.createFromBooleanString(values3[1]));
		

 


		System.out.println(thief.evaluate(pistar));
		System.out.println(thief.evaluate(tsma));
		System.out.println(thief.evaluate(best));
		System.out.println(thief.evaluate(bestNew));
		
		System.out.println(thief.evaluate(bestNew1));
		System.out.println(thief.evaluate(bestNew2));
		System.out.println(thief.evaluate(bestNew3));
		
		
		SingleObjectiveThiefProblem tsa = (SingleObjectiveThiefProblem) new JsonThiefProblemReader()
				.read("../thief-cpp/res/ts225_n1120_uncorr-similar-weights_05.json");
		
		String tsa_ = "[0,1,2,3,4,5,130,6,7,8,9,10,11,12,13,14,15,135,136,137,138,139,37,36,35,34,33,32,31,134,133,132,131,27,28,29,30,155,156,157,158,159,57,58,59,60,61,164,163,162,161,160,38,39,40,41,42,144,143,142,141,140,16,17,18,19,20,21,22,23,24,145,146,147,148,149,49,170,171,172,48,47,46,45,44,43,165,166,167,168,169,69,70,71,72,73,173,174,74,195,196,197,198,199,99,98,220,221,222,223,224,124,123,122,121,120,119,118,219,117,116,115,114,113,112,111,110,109,214,213,212,211,210,87,88,89,90,91,92,93,215,216,217,218,97,96,95,94,194,193,192,191,190,68,67,66,65,64,63,62,185,186,187,188,189,86,85,84,83,82,205,206,207,208,209,108,107,106,105,104,103,102,101,100,204,203,202,201,200,75,179,178,177,76,77,78,79,80,81,184,183,182,181,180,56,55,54,53,52,51,176,175,50,154,153,152,151,150,26,25,129,128,127,126,125];[0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,0,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,0,1,0,1,0]";
		String[] tsaString = tsa_.split(";");
		TTPVariable tsaVar = new TTPVariable(Tour.createFromString(tsaString[0]), Pack.createFromBooleanString(tsaString[1]));
		System.out.println(tsa.evaluate(tsaVar));

		SingleObjectiveThiefProblem kroa = (SingleObjectiveThiefProblem) new ThiefSingleTSPLIBProblemReader()
				.read("../ttp-benchmark-other/TSPLIB/kroA100-ttp/kroA100_n495_uncorr-similar-weights_05.ttp");
		
		String sKroa = "[0, 46, 92, 27, 66, 57, 60, 50, 86, 24, 80, 68, 63, 39, 53, 1, 43, 49, 72, 67, 84, 81, 94, 12, 75, 32, 36, 4, 51, 77, 95, 38, 29, 47, 99, 40, 70, 13, 2, 42, 45, 28, 33, 82, 54, 6, 8, 56, 19, 11, 26, 85, 34, 61, 59, 76, 22, 97, 90, 44, 31, 10, 14, 16, 58, 73, 20, 71, 9, 83, 35, 98, 37, 23, 17, 78, 52, 87, 15, 93, 21, 69, 65, 25, 64, 3, 96, 55, 79, 30, 88, 41, 7, 91, 74, 18, 89, 48, 5, 62];[0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1]";
		//String sKroa = "[0,62,5,48,89,18,74,91,7,41,88,30,79,55,96,3,64,25,65,69,21,93,15,87,52,78,17,23,37,98,35,83,9,71,20,73,58,16,14,10,31,44,90,97,22,76,59,61,34,85,26,11,19,56,8,6,54,82,33,28,45,42,2,13,70,40,99,47,29,38,95,77,51,4,36,32,75,12,94,81,84,67,72,49,43,1,53,39,63,68,80,24,86,50,60,57,66,27,92,46];[0,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,0]";
		

		String[] splitkroa = sKroa.split(";");
		TTPVariable kroaVar = new TTPVariable(Tour.createFromString(splitkroa[0]), Pack.createFromBooleanString(splitkroa[1]));
		System.out.println(kroa.evaluate(kroaVar));


		
		//
		// final String folder = "../thief-benchmark/json/";
		//
		// List<String> problems = new ArrayList<>();
		// problems.add("cluster-3.json");
		// problems.add("cluster-5.json");
		// problems.add("cluster-10.json");
		//
		//
		//
		// for (String p : problems) {
		// SingleObjectiveThiefProblem thief = (SingleObjectiveThiefProblem) new
		// JsonThiefProblemReader().read(folder + p);
		// new TSPLIBThiefProblemWriter().write((SingleObjectiveThiefProblem)
		// thief, String.format("%s/tsplib-cluster-%s.ttp", folder, p));
		// VariableAsHtml.write(thief, null, String.format(folder + "html-"+ p,
		// NAME));
		// }
		// //System.out.println(writer.getResult());
		//
	}
}
