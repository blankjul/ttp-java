par(mfrow=c(2,1))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
plot(nsgaII[[i]][[1]], nsgaII[[i]][[2]], xlim=range(-20, -14), ylim=range(-12, 0), main=paste("Generation ", i),
xlab="f1(x)", ylab="f2(x)", col="blue", pch=16,  type = 'p')
plot(moead[[i]][[1]], moead[[i]][[2]], xlim=range(-20, -14), ylim=range(-12, 0), main=paste("Generation ", i),
xlab="f1(x)", ylab="f2(x)", col="blue", pch=16,  type = 'p')
}
}
for (i in 1:20) myplot(data,length(data))
})
onlyNGeneration = 1
saveGIF({
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
myplot(nsgaII,i)
myplot(moead,i)
}
}
for (i in 1:20) myplot(data,length(data))
})
onlyNGeneration = 1
saveGIF({
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i)
myplot(moead,i)
}
for (i in 1:20) myplot(data,length(data))
})
onlyNGeneration = 1
saveGIF({
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i)
myplot(moead,i)
}
for (i in 1:20) myplot(data,length(data))
}, ani.width = 600 )
onlyNGeneration = 1
saveGIF({
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i)
myplot(moead,i)
}
for (i in 1:20) myplot(data,length(data))
}, ani.width = 1000 )
myplot <-function(data, i, t) {
plot(data[[i]][[1]], data[[i]][[2]], xlim=range(-20, -14), ylim=range(-12, 0), main=t,
xlab="f1(x)", ylab="f2(x)", col="blue", pch=16,  type = 'p')
}
onlyNGeneration = 1
saveGIF({
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
for (i in 1:20) myplot(data,length(data))
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
par(mfrow=c(1,2))
title(main="Test")
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
par(mfrow=c(1,2))
plot(main="Test")
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
par(mfrow=c(1,2))
mtext("Densities", outer = TRUE, cex = 1.5)
onlyNGeneration = 1
saveGIF({
plot.new
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0)
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
mtext("Densities", outer = TRUE, cex = 1.5)
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
title("Densities")
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new
par(mfrow=c(1,2))
for (i in 1:length(data)) {
plot.new
if (i %% onlyNGeneration == 0) {
title("Densities")
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
plot.new
if (i %% onlyNGeneration == 0) {
title("Densities")
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
mtext("Densities")
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
plot.new
if (i %% onlyNGeneration == 0) {
mtext("Densities")
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
plot.new
if (i %% onlyNGeneration == 0) {
mtext("Densities", outer = TRUE, cex = 1.5)
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
plot.new()
if (i %% onlyNGeneration == 0) {
mtext("Densities", outer = TRUE, cex = 1.5)
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000 )
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000, movie.name = "compare.gif")
moead <- fromJSON(, '~/moead.json')
myplot(moead,length(moead))
nsgaII <- fromJSON(, '~/nsgaII.json')
myplot(nsgaII,length(nsgaII))
data <- moead
myplot <-function(data, i, t) {
plot(data[[i]][[1]], data[[i]][[2]], xlim=range(-20, -14), ylim=range(-12, 0), main=t,
xlab="f1(x)", ylab="f2(x)", col="blue", pch=16,  type = 'p', )
}
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000, movie.name = "compare.gif")
library("rjson", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("animation", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
moead <- fromJSON(, '~/moead.json')
myplot(moead,length(moead))
nsgaII <- fromJSON(, '~/nsgaII.json')
myplot(nsgaII,length(nsgaII))
data <- moead
myplot <-function(data, i, t) {
plot(data[[i]][[1]], data[[i]][[2]], xlim=range(-20, -14), ylim=range(-12, 0), main=t,
xlab="f1(x)", ylab="f2(x)", col="blue", pch=16,  type = 'p', )
}
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000, movie.name = "compare.gif")
moead <- fromJSON(, '~/moead.json')
myplot(moead,length(moead))
nsgaII <- fromJSON(, '~/nsgaII.json')
myplot(nsgaII,length(nsgaII))
data <- moead
myplot <-function(data, i, t) {
plot(data[[i]][[1]], data[[i]][[2]], xlim=range(-20, -14), ylim=range(-12, 0), main=t,
xlab="f1(x)", ylab="f2(x)", col="blue", pch=16,  type = 'p', )
}
onlyNGeneration = 1
saveGIF({
plot.new()
par(mfrow=c(1,2))
for (i in 1:length(data)) {
if (i %% onlyNGeneration == 0) {
myplot(nsgaII,i, "NSGAII")
myplot(moead,i, "MOEA/D")
}
}
for (i in 1:20) {
myplot(nsgaII,length(nsgaII), "NSGAII")
myplot(moead,length(moead), "MOEA/D")
}
}, ani.width = 1000)
wcd#
wcd
setwd('~/Workspace/ttp-kava')
setwd('~/Workspace/ttp-java')
library(rjson)
#setwd("/home/julesy/Workspace/ttp-java")
plots <- list()
dir <- "experiment/"
exp <- fromJSON(,paste(dir, "experiment.json", sep=""))
limits <- list()
# collect all the fronts
for(p in exp$problems) {
l = list()
i <- 1
for(a in exp$algorithms) {
for(e in exp$runs) {
file <- paste(dir, p, "_",a,"_", e, ".pf", sep = "")
print(file);
front <- fromJSON(,file)
l[[p]][[i]] <- front
i <- i + 1
}
}
# calculate the limits
limits[[p]]$xlimit <- range(sapply(l, function(entry) sapply(entry, function(x) x[[1]])))
limits[[p]]$ylimit <- range(sapply(l, function(entry) sapply(entry, function(x) x[[2]])))
}
#tmp = sapply(l[['ttp-20-10']], function(x) x[[2]]);
last <- function(x) { return( x[length(x)] ) }
scatter <- function(p, a, e, xlimit, ylimit) {
path_front <- paste(dir, p, "_",a,"_", e, ".pf", sep = "")
print(path_front)
front <- fromJSON( ,   path_front)
ref <- fromJSON( ,  paste(dir, p, ".pf", sep = ""))
svg(paste(dir, p, "_", a ,"_", e, ".svg", sep = ""))
plot(ref[[1]], ref[[2]], xlim=xlimit, ylim=ylimit, pch=1, xlab = "time", ylab="profit", main=paste(p, "_",a,"_", e, sep = ""))
par(new = TRUE)
plot(front[[1]], front[[2]], xlim=xlimit, ylim=ylimit, axes = FALSE, pch=4, xlab = "", ylab = "")
dev.off()
}
for(p in exp$problems) {
for(a in exp$algorithms) {
for(e in exp$runs) {
scatter(p, a, e, limits[[p]]$xlimit, limits[[p]]$ylimit)
}
}
}
for(indicator in exp$indicators) {
for(p in exp$problems) {
entry <- lapply(exp$algorithms, function(a) fromJSON(,paste( dir, p, "_",a, ".", indicator, sep = "")))
svg(paste(dir, p, "_", indicator, ".svg", sep = ""))
op <- par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(entry, names=exp$algorithms, main=paste(p, indicator, sep = "-"), horizontal = TRUE, las = 1, cex.axis = 0.7)
par(op)
dev.off()
}
}
getwd
getwd()
setwd("home/julesy/workspace/ttp-java")
setwd("home/julesy/workspace/ttp-java")
setwd("~/workspace/ttp-java")
library(rjson)
#setwd("/home/julesy/Workspace/ttp-java")
plots <- list()
dir <- "experiment/"
exp <- fromJSON(,paste(dir, "experiment.json", sep=""))
limits <- list()
# collect all the fronts
for(p in exp$problems) {
l = list()
i <- 1
for(a in exp$algorithms) {
for(e in exp$runs) {
file <- paste(dir, p, "_",a,"_", e, ".pf", sep = "")
print(file);
front <- fromJSON(,file)
l[[p]][[i]] <- front
i <- i + 1
}
}
# calculate the limits
limits[[p]]$xlimit <- range(sapply(l, function(entry) sapply(entry, function(x) x[[1]])))
limits[[p]]$ylimit <- range(sapply(l, function(entry) sapply(entry, function(x) x[[2]])))
}
#tmp = sapply(l[['ttp-20-10']], function(x) x[[2]]);
last <- function(x) { return( x[length(x)] ) }
scatter <- function(p, a, e, xlimit, ylimit) {
path_front <- paste(dir, p, "_",a,"_", e, ".pf", sep = "")
print(path_front)
front <- fromJSON( ,   path_front)
ref <- fromJSON( ,  paste(dir, p, ".pf", sep = ""))
svg(paste(dir, p, "_", a ,"_", e, ".svg", sep = ""))
plot(ref[[1]], ref[[2]], xlim=xlimit, ylim=ylimit, pch=1, xlab = "time", ylab="profit", main=paste(p, "_",a,"_", e, sep = ""))
par(new = TRUE)
plot(front[[1]], front[[2]], xlim=xlimit, ylim=ylimit, axes = FALSE, pch=4, xlab = "", ylab = "")
dev.off()
}
for(p in exp$problems) {
for(a in exp$algorithms) {
for(e in exp$runs) {
scatter(p, a, e, limits[[p]]$xlimit, limits[[p]]$ylimit)
}
}
}
for(indicator in exp$indicators) {
for(p in exp$problems) {
entry <- lapply(exp$algorithms, function(a) fromJSON(,paste( dir, p, "_",a, ".", indicator, sep = "")))
svg(paste(dir, p, "_", indicator, ".svg", sep = ""))
op <- par(mar = c(5, 10, 4, 2) + 0.1)
boxplot(entry, names=exp$algorithms, main=paste(p, indicator, sep = "-"), horizontal = TRUE, las = 1, cex.axis = 0.7)
par(op)
dev.off()
}
}
library(rjson)
#setwd("/home/julesy/Workspace/ttp-java")
plots <- list()
dir <- "experiment/"
exp <- fromJSON(,paste(dir, "experiment.json", sep=""))
limits <- list()
# collect all the fronts
for(p in exp$problems) {
l = list()
i <- 1
for(a in exp$algorithms) {
for(e in exp$runs) {
file <- paste(dir, p, "_",a,"_", e, ".pf", sep = "")
print(file);
front <- fromJSON(,file)
l[[p]][[i]] <- front
i <- i + 1
}
}
# calculate the limits
limits[[p]]$xlimit <- range(sapply(l, function(entry) sapply(entry, function(x) x[[1]])))
limits[[p]]$ylimit <- range(sapply(l, function(entry) sapply(entry, function(x) x[[2]])))
}
#tmp = sapply(l[['ttp-20-10']], function(x) x[[2]]);
last <- function(x) { return( x[length(x)] ) }
scatter <- function(p, a, e, xlimit, ylimit) {
path_front <- paste(dir, p, "_",a,"_", e, ".pf", sep = "")
print(path_front)
front <- fromJSON( ,   path_front)
ref <- fromJSON( ,  paste(dir, p, ".pf", sep = ""))
svg(paste(dir, p, "_", a ,"_", e, ".svg", sep = ""))
plot(ref[[1]], ref[[2]], xlim=xlimit, ylim=ylimit, pch=1, xlab = "time", ylab="profit", main=paste(p, "_",a,"_", e, sep = ""))
par(new = TRUE)
plot(front[[1]], front[[2]], xlim=xlimit, ylim=ylimit, axes = FALSE, pch=4, xlab = "", ylab = "")
dev.off()
}
for(p in exp$problems) {
for(a in exp$algorithms) {
for(e in exp$runs) {
scatter(p, a, e, limits[[p]]$xlimit, limits[[p]]$ylimit)
}
}
}
for(indicator in exp$indicators) {
for(p in exp$problems) {
entry <- lapply(exp$algorithms, function(a) fromJSON(,paste( dir, p, "_",a, ".", indicator, sep = "")))
svg(paste(dir, p, "_", indicator, ".svg", sep = ""))
op <- par(mar = c(5, 10, 4, 2) + 0.5)
boxplot(entry, names=exp$algorithms, main=paste(p, indicator, sep = "-"), horizontal = TRUE, las = 1, cex.axis = 0.7)
par(op)
dev.off()
}
}
